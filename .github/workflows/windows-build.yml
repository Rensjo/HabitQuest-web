name: Windows MSI/NSIS Build

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    
    strategy:
      matrix:
        target: [x86_64-pc-windows-msvc]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
        
    - name: Install Tauri CLI
      run: |
        echo "Installing Tauri CLI via npm (recommended for v2)..."
        npm install -g @tauri-apps/cli@latest
        echo "Tauri CLI installed, checking version..."
        npx tauri --version
      shell: pwsh

    - name: Debug environment
      run: |
        echo "Node version: $(node --version)"
        echo "npm version: $(npm --version)"
        echo "Rust version: $(rustc --version)"
        echo "Cargo version: $(cargo --version)"
        echo "Tauri CLI version: $(npx tauri --version)"
        echo "Working directory: $(Get-Location)"
        echo "Target: ${{ matrix.target }}"
      shell: pwsh
      
    - name: Install frontend dependencies
      run: |
        npm ci
        
    - name: Build frontend
      run: |
        npm run build
        
    - name: Build Windows installer
      run: |
        echo "Starting Tauri build for Windows target: ${{ matrix.target }}"
        npx tauri build --target ${{ matrix.target }} --verbose
      shell: pwsh
      env:
        RUST_BACKTRACE: 1

    - name: Check build outputs (on failure)
      if: failure()
      run: |
        echo "=== Build failed, checking logs and outputs ==="
        if (Test-Path "src-tauri/target/") {
            Get-ChildItem "src-tauri/target/" -Recurse -ErrorAction SilentlyContinue | Format-Table Name, Length, LastWriteTime
        } else {
            echo "No target directory found"
        }
        echo "=== Looking for log files ==="
        Get-ChildItem -Path "." -Recurse -Filter "*.log" -ErrorAction SilentlyContinue | ForEach-Object { 
            echo "=== Content of $($_.FullName) ==="
            Get-Content $_.FullName -ErrorAction SilentlyContinue
        }
      shell: pwsh
        
    - name: List build outputs
      run: |
        echo "=== Build output structure ==="
        Get-ChildItem -Recurse -Path "src-tauri/target" -Include "*.msi", "*.exe", "*.zip" -ErrorAction SilentlyContinue | Select-Object -First 20 | ForEach-Object { $_.FullName }
        echo "=== Bundle directory contents ==="
        if (Test-Path "src-tauri/target/${{ matrix.target }}/release/bundle/") {
            Get-ChildItem -Path "src-tauri/target/${{ matrix.target }}/release/bundle/" -Recurse | Format-Table Name, Length, LastWriteTime
        } else {
            echo "Bundle directory not found"
        }
        echo "=== Release directory contents ==="
        if (Test-Path "src-tauri/target/${{ matrix.target }}/release/") {
            Get-ChildItem -Path "src-tauri/target/${{ matrix.target }}/release/" | Format-Table Name, Length, LastWriteTime
        } else {
            echo "Release directory not found"
        }
      shell: pwsh
      
    - name: Package artifacts
      run: |
        New-Item -ItemType Directory -Force -Path "packages"
        New-Item -ItemType Directory -Force -Path "temp-windows"
        
        # Copy documentation files once
        Copy-Item "INSTALLATION-GUIDE.md" -Destination "temp-windows/"
        Copy-Item "README.md" -Destination "temp-windows/"
        
        # Copy MSI installer if available
        if (Test-Path "src-tauri/target/${{ matrix.target }}/release/bundle/msi") {
            Get-ChildItem "src-tauri/target/${{ matrix.target }}/release/bundle/msi" -Filter "*.msi" | Copy-Item -Destination "temp-windows/"
        }
        
        # Copy NSIS setup installer if available
        if (Test-Path "src-tauri/target/${{ matrix.target }}/release/bundle/nsis") {
            Get-ChildItem "src-tauri/target/${{ matrix.target }}/release/bundle/nsis" -Filter "*.exe" | Copy-Item -Destination "temp-windows/"
        }
        
        # Copy portable executable if available
        if (Test-Path "src-tauri/target/${{ matrix.target }}/release/habitquest.exe") {
            Copy-Item "src-tauri/target/${{ matrix.target }}/release/habitquest.exe" -Destination "temp-windows/"
        }
        
        # Create single comprehensive Windows package
        Set-Location "temp-windows"
        Compress-Archive -Path "*" -DestinationPath "../packages/HabitQuest-windows-x64.zip"
        Set-Location ".."
        Remove-Item "temp-windows" -Recurse -Force
      shell: pwsh
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: HabitQuest-windows-${{ matrix.target }}
        path: |
          packages/*.zip
          src-tauri/target/${{ matrix.target }}/release/bundle/**/*
        retention-days: 30