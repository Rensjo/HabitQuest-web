name: Cross-Platform Build

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Build version (e.g., v4.1.2)'
        required: true
        default: 'v4.1.2'
      create_release:
        description: 'Create GitHub release'
        type: boolean
        default: false
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'src-tauri/**'
      - 'package.json'
      - 'Cargo.toml'
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
  TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

jobs:
  # Build for Windows (x64 and x86)
  build-windows:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-pc-windows-msvc  # 64-bit Windows
          - i686-pc-windows-msvc    # 32-bit Windows

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install Tauri CLI
        run: |
          echo "Installing Tauri CLI via cargo..."
          cargo install tauri-cli --version ^2.0
          echo "Tauri CLI installed, checking version..."
          $env:PATH += ";$env:USERPROFILE\.cargo\bin"
          cargo tauri --version
        shell: pwsh

      - name: Install dependencies
        run: |
          npm ci
          npm audit fix || true

      - name: Build frontend
        run: npm run build

      - name: Build Tauri app
        run: |
          $env:PATH += ";$env:USERPROFILE\.cargo\bin"
          cargo tauri build --target ${{ matrix.target }}
        shell: pwsh

      - name: List Windows build outputs
        run: |
          echo "=== Build output structure ==="
          Get-ChildItem -Recurse -Path "src-tauri/target" -Include "*.msi", "*.exe", "*.zip" -ErrorAction SilentlyContinue | Select-Object -First 20 | ForEach-Object { $_.FullName }
          echo "=== Bundle directory contents ==="
          if (Test-Path "src-tauri/target/${{ matrix.target }}/release/bundle/") {
              Get-ChildItem -Path "src-tauri/target/${{ matrix.target }}/release/bundle/" -Recurse | Format-Table Name, Length, LastWriteTime
          } else {
              echo "Bundle directory not found"
          }
        shell: pwsh

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-${{ matrix.target }}
          path: |
            src-tauri/target/${{ matrix.target }}/release/bundle/**/*
            src-tauri/target/${{ matrix.target }}/release/*.exe
            src-tauri/target/${{ matrix.target }}/release/*.msi
          retention-days: 30

  # Build for macOS (Intel and Apple Silicon)
  build-macos:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-apple-darwin     # Intel Macs
          - aarch64-apple-darwin    # Apple Silicon Macs

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install macOS dependencies
        run: |
          # Install create-dmg for DMG creation
          npm install -g create-dmg || true

      - name: Install dependencies
        run: |
          npm ci
          npm audit fix || true

      - name: Build frontend
        run: npm run build

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_SIGNING_IDENTITY: "-"  # Ad-hoc signing for development
        with:
          args: --target ${{ matrix.target }}

      - name: List macOS build outputs
        run: |
          echo "=== Build output structure ==="
          find src-tauri/target -name "*.dmg" -o -name "*.app" -o -name "*.tar.gz" | head -20
          echo "=== Bundle directory contents ==="
          ls -la src-tauri/target/${{ matrix.target }}/release/bundle/ || echo "Bundle directory not found"
          echo "=== Release directory contents ==="
          ls -la src-tauri/target/${{ matrix.target }}/release/ || echo "Release directory not found"

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.target }}
          path: |
            src-tauri/target/${{ matrix.target }}/release/bundle/**/*
            src-tauri/target/${{ matrix.target }}/release/*.app
            src-tauri/target/${{ matrix.target }}/release/*.dmg
          retention-days: 30

  # Build for Linux (x64 and ARM64)
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-gnu    # 64-bit Linux
          - aarch64-unknown-linux-gnu   # ARM64 Linux

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libappindicator3-dev librsvg2-dev patchelf libssl-dev
          sudo apt-get install -y libwebkit2gtk-4.1-dev || sudo apt-get install -y libwebkit2gtk-4.0-dev

      - name: Install Tauri CLI
        run: |
          echo "Installing Tauri CLI via cargo..."
          cargo install tauri-cli --version ^2.0
          echo "Tauri CLI installed, checking version..."
          export PATH="$HOME/.cargo/bin:$PATH"
          cargo tauri --version

      - name: Install ARM64 cross-compilation tools (if needed)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          npm ci
          npm audit fix || true

      - name: Build frontend
        run: npm run build

      - name: Build Tauri app
        run: |
          export PATH="$HOME/.cargo/bin:$PATH"
          cargo tauri build --target ${{ matrix.target }}

      - name: List Linux build outputs
        run: |
          echo "=== Build output structure ==="
          find src-tauri/target -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" | head -20
          echo "=== Bundle directory contents ==="
          ls -la src-tauri/target/${{ matrix.target }}/release/bundle/ || echo "Bundle directory not found"
          echo "=== Release directory contents ==="
          ls -la src-tauri/target/${{ matrix.target }}/release/ || echo "Release directory not found"

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.target }}
          path: |
            src-tauri/target/${{ matrix.target }}/release/bundle/**/*
            src-tauri/target/${{ matrix.target }}/release/*.AppImage
            src-tauri/target/${{ matrix.target }}/release/*.deb
            src-tauri/target/${{ matrix.target }}/release/*.rpm
          retention-days: 30

  # Create universal binaries and release (optional)
  create-release:
    if: github.event.inputs.create_release == 'true' || startsWith(github.ref, 'refs/tags/')
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Display artifact structure
        run: find ./artifacts -type f -name "*" | head -20

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.version || github.ref_name }}
          release_name: HabitQuest ${{ github.event.inputs.version || github.ref_name }}
          body: |
            ## HabitQuest Desktop App Release
            
            ### ðŸŽ¯ What's New in ${{ github.event.inputs.version || github.ref_name }}
            - Enhanced analytics dashboard with tabbed navigation
            - Historical data viewing capabilities  
            - Visual progress charts and trend analysis
            - Advanced target tracking per category
            - Comprehensive streak analysis
            - Reward purchase analytics
            
            ### ðŸ“¦ Downloads
            Choose the appropriate download for your platform:
            
            **Windows:**
            - 64-bit: `.msi` or `.exe` installer
            - 32-bit: `.msi` or `.exe` installer (legacy support)
            
            **macOS:**
            - Apple Silicon (M1/M2): `aarch64-apple-darwin.dmg`
            - Intel: `x86_64-apple-darwin.dmg`
            
            **Linux:**
            - 64-bit: `.deb`, `.rpm`, or `.AppImage`
            - ARM64: `.deb`, `.rpm`, or `.AppImage` (ARM64)
            
            ### ðŸ”„ Migration Support
            This version includes enhanced data import/export functionality for seamless device migration.
            
            ### ðŸ›  Technical Notes
            - Built with Tauri v2 for optimal performance
            - Cross-platform compatibility ensured
            - Modern web technologies (React, TypeScript, Tailwind CSS)
          draft: false
          prerelease: false

      - name: Upload Windows x64 MSI
        if: always()
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/windows-x86_64-pc-windows-msvc/*.msi
          asset_name: HabitQuest-${{ github.event.inputs.version || github.ref_name }}-windows-x64.msi
          asset_content_type: application/octet-stream
        continue-on-error: true

      - name: Upload Windows x64 EXE
        if: always()
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/windows-x86_64-pc-windows-msvc/*.exe
          asset_name: HabitQuest-${{ github.event.inputs.version || github.ref_name }}-windows-x64-setup.exe
          asset_content_type: application/octet-stream
        continue-on-error: true