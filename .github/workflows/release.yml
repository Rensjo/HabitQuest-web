name: Release Build

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v4.1.2'
  push:
    tags:
      - 'v*'
  release:
    types: [published]

env:
  CARGO_TERM_COLOR: always

jobs:
  # Windows Build (MSI and NSIS)
  build-windows:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-pc-windows-msvc
            arch: x64
          - target: i686-pc-windows-msvc
            arch: x86

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install Rust target
        run: rustup target add ${{ matrix.target }}

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Install Tauri CLI
        run: npm install -g @tauri-apps/cli

      - name: Build Tauri app (MSI)
        run: npm run tauri build -- --target ${{ matrix.target }} --config '{"tauri":{"bundle":{"targets":["msi"]}}}'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

      - name: Build Tauri app (NSIS)
        run: npm run tauri build -- --target ${{ matrix.target }} --config '{"tauri":{"bundle":{"targets":["nsis"]}}}'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

      - name: Upload MSI artifacts
        uses: actions/upload-artifact@v4
        with:
          name: habitquest-windows-msi-${{ matrix.arch }}
          path: |
            src-tauri/target/${{ matrix.target }}/release/bundle/msi/*.msi
            src-tauri/target/${{ matrix.target }}/release/bundle/msi/*.msi.zip

      - name: Upload NSIS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: habitquest-windows-nsis-${{ matrix.arch }}
          path: |
            src-tauri/target/${{ matrix.target }}/release/bundle/nsis/*.exe
            src-tauri/target/${{ matrix.target }}/release/bundle/nsis/*.nsis.zip

  # macOS Build (DMG and App Bundle)
  build-macos:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: aarch64-apple-darwin
            arch: arm64
          - target: x86_64-apple-darwin
            arch: x64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install Rust target
        run: rustup target add ${{ matrix.target }}

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Install Tauri CLI
        run: npm install -g @tauri-apps/cli

      - name: Build Tauri app
        run: npm run tauri build -- --target ${{ matrix.target }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

      - name: Upload DMG artifacts
        uses: actions/upload-artifact@v4
        with:
          name: habitquest-macos-dmg-${{ matrix.arch }}
          path: |
            src-tauri/target/${{ matrix.target }}/release/bundle/dmg/*.dmg

      - name: Upload App Bundle artifacts
        uses: actions/upload-artifact@v4
        with:
          name: habitquest-macos-app-${{ matrix.arch }}
          path: |
            src-tauri/target/${{ matrix.target }}/release/bundle/macos/*.app

  # Linux Build (AppImage, deb, rpm)
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            arch: x64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.0-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            patchelf

      - name: Install Rust target
        run: rustup target add ${{ matrix.target }}

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Install Tauri CLI
        run: npm install -g @tauri-apps/cli

      - name: Build Tauri app (AppImage)
        run: npm run tauri build -- --target ${{ matrix.target }} --config '{"tauri":{"bundle":{"targets":["appimage"]}}}'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

      - name: Build Tauri app (deb)
        run: npm run tauri build -- --target ${{ matrix.target }} --config '{"tauri":{"bundle":{"targets":["deb"]}}}'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

      - name: Upload AppImage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: habitquest-linux-appimage-${{ matrix.arch }}
          path: |
            src-tauri/target/${{ matrix.target }}/release/bundle/appimage/*.AppImage
            src-tauri/target/${{ matrix.target }}/release/bundle/appimage/*.AppImage.tar.gz

      - name: Upload deb artifacts
        uses: actions/upload-artifact@v4
        with:
          name: habitquest-linux-deb-${{ matrix.arch }}
          path: |
            src-tauri/target/${{ matrix.target }}/release/bundle/deb/*.deb

  # Create GitHub Release
  create-release:
    if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/v') || github.event_name == 'release'
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Display structure of downloaded files
        run: ls -la artifacts/

      - name: Get version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "release" ]]; then
            echo "VERSION=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/v')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          release_name: HabitQuest ${{ steps.version.outputs.VERSION }}
          body: |
            ## HabitQuest Desktop Application ${{ steps.version.outputs.VERSION }}
            
            ### Features
            - ‚ú® Category management with create/delete functionality
            - üéØ Goal tracking by category
            - üíé Rewards system
            - üìä Analytics and insights
            - üé® Beautiful dark/light theme
            - üîä Sound effects and background music
            
            ### Downloads
            Choose the appropriate installer for your operating system:
            
            #### Windows
            - **MSI Installer** (Recommended): Traditional Windows installer
            - **NSIS Installer**: Lightweight installer with modern UI
            
            #### macOS
            - **DMG**: Disk image for easy installation
            - **App Bundle**: Direct application bundle
            
            #### Linux
            - **AppImage**: Portable application (no installation required)
            - **DEB Package**: For Debian/Ubuntu-based distributions
            
            ### Installation Instructions
            1. Download the appropriate file for your platform
            2. Run the installer or extract the application
            3. Follow the setup wizard (Windows/macOS) or run directly (AppImage)
            
            ### Notes
            - All platforms support automatic updates
            - First launch may take a moment to initialize
            - Data is stored locally on your device
            
            Built with ‚ù§Ô∏è using Tauri + React + TypeScript
          draft: false
          prerelease: false

      - name: Upload Windows MSI x64
        uses: actions/upload-release-asset@v1
        if: steps.create_release.outputs.upload_url
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/habitquest-windows-msi-x64/
          asset_name: HabitQuest-${{ steps.version.outputs.VERSION }}-Windows-x64.msi
          asset_content_type: application/x-msi

      - name: Upload Windows NSIS x64
        uses: actions/upload-release-asset@v1
        if: steps.create_release.outputs.upload_url
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/habitquest-windows-nsis-x64/
          asset_name: HabitQuest-${{ steps.version.outputs.VERSION }}-Windows-x64-Setup.exe
          asset_content_type: application/x-msdownload

      - name: Upload macOS DMG ARM64
        uses: actions/upload-release-asset@v1
        if: steps.create_release.outputs.upload_url
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/habitquest-macos-dmg-arm64/
          asset_name: HabitQuest-${{ steps.version.outputs.VERSION }}-macOS-ARM64.dmg
          asset_content_type: application/x-apple-diskimage

      - name: Upload macOS DMG x64
        uses: actions/upload-release-asset@v1
        if: steps.create_release.outputs.upload_url
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/habitquest-macos-dmg-x64/
          asset_name: HabitQuest-${{ steps.version.outputs.VERSION }}-macOS-Intel.dmg
          asset_content_type: application/x-apple-diskimage

      - name: Upload Linux AppImage
        uses: actions/upload-release-asset@v1
        if: steps.create_release.outputs.upload_url
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/habitquest-linux-appimage-x64/
          asset_name: HabitQuest-${{ steps.version.outputs.VERSION }}-Linux-x64.AppImage
          asset_content_type: application/x-executable

      - name: Upload Linux DEB
        uses: actions/upload-release-asset@v1
        if: steps.create_release.outputs.upload_url
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/habitquest-linux-deb-x64/
          asset_name: HabitQuest-${{ steps.version.outputs.VERSION }}-Linux-x64.deb
          asset_content_type: application/vnd.debian.binary-package