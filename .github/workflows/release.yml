name: Release Build

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v4.2.0)'
        required: true
        default: 'v4.2.0'

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}
      upload_url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - name: Create release
        id: create-release
        uses: actions/github-script@v7
        with:
          script: |
            const version = context.payload.inputs?.version || context.ref.replace('refs/tags/', '');
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: version,
              name: `HabitQuest ${version}`,
              body: `
            ## ðŸŽ¯ HabitQuest ${version} - Enhanced Notification System
            
            ### ðŸš€ Major Features
            - **System Tray Integration**: App continues running in background when window is closed
            - **Auto-start on Login**: Automatically starts when you log into Windows
            - **Enhanced Notifications**: Proper Windows app identity (shows as "habitquest" not "WebView2 Manager")
            - **Background Service**: Smart reminders every 5 minutes during active hours (8 AM - 10 PM)
            - **Tauri v2.8.5 Integration**: Latest notification API with comprehensive fallback system
            
            ### ðŸ›  Technical Improvements
            - Updated to Tauri v2.8.5 with tray-icon feature
            - Added tauri-plugin-autostart for seamless startup
            - Implemented proper notification capabilities and permissions
            - Enhanced notification settings UI with "Initialize & Test" button
            - Added comprehensive fallback system for notification API
            
            ### ðŸ“¦ Installation Options
            - **MSI Installer**: Recommended for most users (includes auto-updater)
            - **NSIS Setup**: Alternative installer with different configuration options
            - **Portable ZIP**: Extract and run directly without installation
            
            ### ðŸ”§ What's Fixed
            - âœ… App startup Error 101
            - âœ… WebView2 Manager identity problem  
            - âœ… Missing Windows notification registration
            - âœ… Background notification failures
            - âœ… System tray integration missing
            
            ### ðŸ§ª Testing Instructions
            1. Download and install the MSI package
            2. Open HabitQuest â†’ Settings â†’ Notifications
            3. Click "Initialize & Test" button
            4. Check Windows Settings â†’ Notifications for "HabitQuest" entry
            5. Close app window - it will minimize to system tray
            6. Enjoy background habit reminders!
            
            **Upgrade from older versions**: This version will properly replace any existing HabitQuest installation.
            `,
              draft: false,
              prerelease: false
            });
            return data.id;

  build-windows:
    needs: create-release
    runs-on: windows-latest
    
    strategy:
      matrix:
        target: [x86_64-pc-windows-msvc]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
        
    - name: Install Tauri CLI
      run: |
        echo "Installing Tauri CLI via npm (recommended for v2)..."
        npm install -g @tauri-apps/cli@latest
        echo "Tauri CLI installed, checking version..."
        npx tauri --version
      shell: pwsh

    - name: Install frontend dependencies
      run: npm ci
        
    - name: Build frontend
      run: npm run build
        
    - name: Build Windows installer
      run: |
        echo "Starting Tauri build for Windows target: ${{ matrix.target }}"
        npx tauri build --target ${{ matrix.target }} --verbose
      shell: pwsh
      env:
        RUST_BACKTRACE: 1
        
    - name: Package release artifacts
      run: |
        New-Item -ItemType Directory -Force -Path "release-packages"
        
        # Copy MSI installer
        if (Test-Path "src-tauri/target/${{ matrix.target }}/release/bundle/msi") {
            $msiFile = Get-ChildItem "src-tauri/target/${{ matrix.target }}/release/bundle/msi" -Filter "*.msi" | Select-Object -First 1
            if ($msiFile) {
                Copy-Item $msiFile.FullName -Destination "release-packages/HabitQuest-v4.2.0-Windows-x64.msi"
            }
        }
        
        # Copy NSIS setup
        if (Test-Path "src-tauri/target/${{ matrix.target }}/release/bundle/nsis") {
            $nsisFile = Get-ChildItem "src-tauri/target/${{ matrix.target }}/release/bundle/nsis" -Filter "*setup.exe" | Select-Object -First 1
            if ($nsisFile) {
                Copy-Item $nsisFile.FullName -Destination "release-packages/HabitQuest-v4.2.0-Windows-x64-setup.exe"
            }
        }
        
        # Create portable package
        if (Test-Path "src-tauri/target/${{ matrix.target }}/release/habitquest.exe") {
            New-Item -ItemType Directory -Force -Path "portable"
            Copy-Item "src-tauri/target/${{ matrix.target }}/release/habitquest.exe" -Destination "portable/"
            Copy-Item "README.md" -Destination "portable/"
            Copy-Item "ENHANCED_NOTIFICATION_SYSTEM.md" -Destination "portable/"
            Compress-Archive -Path "portable/*" -DestinationPath "release-packages/HabitQuest-v4.2.0-Windows-x64-portable.zip"
            Remove-Item "portable" -Recurse -Force
        }
        
        # List created packages
        Get-ChildItem "release-packages" | Format-Table Name, Length
      shell: pwsh
        
    - name: Upload MSI to release
      if: hashFiles('release-packages/*.msi') != ''
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: release-packages/HabitQuest-v4.2.0-Windows-x64.msi
        asset_name: HabitQuest-v4.2.0-Windows-x64.msi
        asset_content_type: application/x-msi
        
    - name: Upload NSIS setup to release
      if: hashFiles('release-packages/*setup.exe') != ''
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: release-packages/HabitQuest-v4.2.0-Windows-x64-setup.exe
        asset_name: HabitQuest-v4.2.0-Windows-x64-setup.exe
        asset_content_type: application/octet-stream
        
    - name: Upload portable ZIP to release
      if: hashFiles('release-packages/*.zip') != ''
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: release-packages/HabitQuest-v4.2.0-Windows-x64-portable.zip
        asset_name: HabitQuest-v4.2.0-Windows-x64-portable.zip
        asset_content_type: application/zip

  build-macos:
    needs: create-release
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: x86_64-apple-darwin,aarch64-apple-darwin
        
    - name: Install Tauri CLI
      run: npm install -g @tauri-apps/cli@latest

    - name: Install frontend dependencies
      run: npm ci
        
    - name: Build frontend
      run: npm run build
        
    - name: Build macOS app (x86_64)
      run: npx tauri build --target x86_64-apple-darwin
      env:
        RUST_BACKTRACE: 1
        
    - name: Build macOS app (Apple Silicon)
      run: npx tauri build --target aarch64-apple-darwin
      env:
        RUST_BACKTRACE: 1
        
    - name: Package macOS artifacts
      run: |
        mkdir -p release-packages
        
        # Package x86_64 DMG
        if [ -f "src-tauri/target/x86_64-apple-darwin/release/bundle/dmg"/*.dmg ]; then
            cp src-tauri/target/x86_64-apple-darwin/release/bundle/dmg/*.dmg release-packages/HabitQuest-v4.2.0-macOS-x64.dmg
        fi
        
        # Package Apple Silicon DMG  
        if [ -f "src-tauri/target/aarch64-apple-darwin/release/bundle/dmg"/*.dmg ]; then
            cp src-tauri/target/aarch64-apple-darwin/release/bundle/dmg/*.dmg release-packages/HabitQuest-v4.2.0-macOS-arm64.dmg
        fi
        
        ls -la release-packages/
        
    - name: Upload macOS x64 DMG to release
      if: hashFiles('release-packages/*x64.dmg') != ''
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: release-packages/HabitQuest-v4.2.0-macOS-x64.dmg
        asset_name: HabitQuest-v4.2.0-macOS-x64.dmg
        asset_content_type: application/x-apple-diskimage
        
    - name: Upload macOS ARM64 DMG to release
      if: hashFiles('release-packages/*arm64.dmg') != ''
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: release-packages/HabitQuest-v4.2.0-macOS-arm64.dmg
        asset_name: HabitQuest-v4.2.0-macOS-arm64.dmg
        asset_content_type: application/x-apple-diskimage