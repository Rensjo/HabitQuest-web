name: macOS DMG Build

on:
  workflow_dispatch:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  macos:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        target: [aarch64-apple-darwin, x86_64-apple-darwin]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          toolchain: stable

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri
          key: ${{ runner.os }}-${{ matrix.target }}
          cache-on-failure: true

      - name: Debug environment
        run: |
          echo "Node version: $(node --version)"
          echo "npm version: $(npm --version)" 
          echo "Rust version: $(rustc --version)"
          echo "Cargo version: $(cargo --version)"
          echo "Tauri CLI version: $(npm list @tauri-apps/cli)"
          echo "Working directory: $(pwd)"
          echo "Target: ${{ matrix.target }}"

      - name: Install system dependencies
        run: |
          # Check if cmake is already installed to avoid reinstall warnings
          if ! command -v cmake &> /dev/null; then
            echo "Installing cmake..."
            brew install cmake
          else
            echo "cmake is already installed: $(cmake --version)"
          fi
          
      - name: Install Rust dependencies
        run: |
          # Ensure we have the right Rust targets
          rustup target add ${{ matrix.target }}

      - name: Install frontend dependencies
        run: |
          npm ci

      - name: Build frontend
        run: |
          npm run build

      - name: Build Tauri app
        run: |
          echo "Starting Tauri build for target: ${{ matrix.target }}"
          npm run tauri build -- --target ${{ matrix.target }} --verbose
        env:
          APPLE_SIGNING_IDENTITY: "-"
          RUST_BACKTRACE: 1

      - name: Check build outputs (on failure)
        if: failure()
        run: |
          echo "=== Build failed, checking logs and outputs ==="
          ls -la src-tauri/target/ || echo "No target directory found"
          ls -la src-tauri/target/${{ matrix.target }}/ || echo "No target-specific directory found"  
          echo "=== Cargo build log (if available) ==="
          find . -name "*.log" -exec cat {} \; || echo "No log files found"
          
      - name: List build outputs
        run: |
          echo "=== Build output structure ==="
          find src-tauri/target -name "*.dmg" -o -name "*.app" -o -name "*.tar.gz" | head -20
          echo "=== Bundle directory contents ==="
          ls -la src-tauri/target/${{ matrix.target }}/release/bundle/ || echo "Bundle directory not found"
          echo "=== All target directories ==="
          ls -la src-tauri/target/ || echo "Target directory not found"
          echo "=== Release directory contents ==="
          ls -la src-tauri/target/${{ matrix.target }}/release/ || echo "Release directory not found"

      - name: List build outputs
        run: |
          echo "=== Build output structure ==="
          find src-tauri/target -name "*.dmg" -o -name "*.app" -o -name "*.tar.gz" | head -20
          echo "=== Bundle directory contents ==="
          ls -la src-tauri/target/${{ matrix.target }}/release/bundle/ || echo "Bundle directory not found"
          echo "=== All target directories ==="
          ls -la src-tauri/target/ || echo "Target directory not found"
          echo "=== Release directory contents ==="
          ls -la src-tauri/target/${{ matrix.target }}/release/ || echo "Release directory not found"

      - name: Package artifacts
        run: |
          # Store the current working directory
          WORKSPACE_DIR=$(pwd)
          mkdir -p packages
          
          # Determine architecture suffix
          if [[ "${{ matrix.target }}" == "aarch64-apple-darwin" ]]; then
            ARCH="arm64"
          else
            ARCH="x64"
          fi
          
          # Create single comprehensive macOS package
          mkdir -p "temp-macos"
          
          # Copy documentation files once
          cp INSTALLATION-GUIDE.md temp-macos/
          cp README.md temp-macos/
          
          # Copy DMG file if available
          if [ -d "src-tauri/target/${{ matrix.target }}/release/bundle/dmg" ]; then
            find "src-tauri/target/${{ matrix.target }}/release/bundle/dmg" -name "*.dmg" -exec cp {} temp-macos/ \;
          fi
          
          # Copy .app bundle if available
          if [ -d "src-tauri/target/${{ matrix.target }}/release/bundle/macos" ]; then
            find "src-tauri/target/${{ matrix.target }}/release/bundle/macos" -name "*.app" -exec cp -r {} temp-macos/ \;
          fi
          
          # Create single zip package
          cd temp-macos && zip -r "../packages/HabitQuest-macos-${ARCH}.zip" * && cd "$WORKSPACE_DIR"
          
          # Clean up
          rm -rf temp-macos

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: HabitQuest-macos-${{ matrix.target }}
          path: |
            packages/*.zip
            src-tauri/target/${{ matrix.target }}/release/bundle/**/*
          retention-days: 30