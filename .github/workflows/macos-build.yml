name: macOS DMG Build

on:
  workflow_dispatch:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  macos:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        target: [aarch64-apple-darwin, x86_64-apple-darwin]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install macOS dependencies
        run: |
          # Install create-dmg for DMG creation
          npm install -g create-dmg || true

      - name: Install frontend dependencies
        run: |
          npm ci

      - name: Build frontend
        run: |
          npm run build

      - name: Build Tauri DMG (ad-hoc signing)
        uses: tauri-apps/tauri-action@v0
        env:
          APPLE_SIGNING_IDENTITY: "-"
        with:
          args: --target ${{ matrix.target }}

      - name: List build outputs
        run: |
          echo "=== Build output structure ==="
          find src-tauri/target -name "*.dmg" -o -name "*.app" -o -name "*.tar.gz" | head -20
          echo "=== Bundle directory contents ==="
          ls -la src-tauri/target/${{ matrix.target }}/release/bundle/ || echo "Bundle directory not found"
          echo "=== All target directories ==="
          ls -la src-tauri/target/ || echo "Target directory not found"
          echo "=== Release directory contents ==="
          ls -la src-tauri/target/${{ matrix.target }}/release/ || echo "Release directory not found"

      - name: Package artifacts
        run: |
          mkdir -p packages
          
          # Determine architecture suffix
          if [[ "${{ matrix.target }}" == "aarch64-apple-darwin" ]]; then
            ARCH="arm64"
          else
            ARCH="x64"
          fi
          
          # Create clean package directory
          mkdir -p "temp-package"
          
          # Copy installation guide and readme
          cp INSTALLATION-GUIDE.md temp-package/
          cp README.md temp-package/
          
          # Package DMG files with clean structure
          if [ -d "src-tauri/target/${{ matrix.target }}/release/bundle/dmg" ]; then
            cd src-tauri/target/${{ matrix.target }}/release/bundle/dmg
            # Copy only the DMG file (not the nested folder)
            find . -name "*.dmg" -exec cp {} ../../../../../temp-package/ \;
            cd ../../../../../
            cd temp-package && zip -r "../packages/HabitQuest-macos-${ARCH}.zip" * && cd ..
            rm -rf temp-package && mkdir -p temp-package
            cp INSTALLATION-GUIDE.md temp-package/
            cp README.md temp-package/
          fi
          
          # Package .app bundles with clean structure
          if [ -d "src-tauri/target/${{ matrix.target }}/release/bundle/macos" ]; then
            cd src-tauri/target/${{ matrix.target }}/release/bundle/macos
            # Copy only the .app bundle (not the nested folder)
            find . -name "*.app" -exec cp -r {} ../../../../../temp-package/ \;
            cd ../../../../../
            cd temp-package && zip -r "../packages/HabitQuest-macos-${ARCH}-app.zip" * && cd ..
          fi
          
          # Clean up
          rm -rf temp-package

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: HabitQuest-macos-${{ matrix.target }}
          path: |
            packages/*.zip
            src-tauri/target/${{ matrix.target }}/release/bundle/**/*
          retention-days: 30