name: Linux AppImage Build

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-linux:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        # Try newer webkit package first, fallback to older version
        sudo apt-get install -y libgtk-3-dev libappindicator3-dev librsvg2-dev patchelf libssl-dev
        sudo apt-get install -y libwebkit2gtk-4.1-dev || sudo apt-get install -y libwebkit2gtk-4.0-dev
        
    - name: Install Tauri CLI
      run: |
        echo "Installing Tauri CLI via npm (recommended for v2)..."
        npm install -g @tauri-apps/cli@latest
        echo "Tauri CLI installed, checking version..."
        npx tauri --version

    - name: Debug environment
      run: |
        echo "Node version: $(node --version)"
        echo "npm version: $(npm --version)" 
        echo "Rust version: $(rustc --version)"
        echo "Cargo version: $(cargo --version)"
        echo "Tauri CLI version: $(npx tauri --version)"
        echo "Working directory: $(pwd)"
        echo "Target: ${{ matrix.target }}"
      
    - name: Install frontend dependencies
      run: |
        npm ci
        
    - name: Build frontend
      run: |
        npm run build
        
    - name: Build Linux installer
      run: |
        echo "Starting Tauri build for Linux target: ${{ matrix.target }}"
        npx tauri build --target ${{ matrix.target }} --verbose
      env:
        RUST_BACKTRACE: 1

    - name: Check build outputs (on failure)
      if: failure()
      run: |
        echo "=== Build failed, checking logs and outputs ==="
        ls -la src-tauri/target/ || echo "No target directory found"
        ls -la src-tauri/target/${{ matrix.target }}/ || echo "No target-specific directory found"  
        echo "=== Cargo build log (if available) ==="
        find . -name "*.log" -exec cat {} \; || echo "No log files found"
        
    - name: List build outputs
      run: |
        echo "=== Build output structure ==="
        find src-tauri/target -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" | head -20
        echo "=== Bundle directory contents ==="
        ls -la src-tauri/target/${{ matrix.target }}/release/bundle/ || echo "Bundle directory not found"
        echo "=== Release directory contents ==="
        ls -la src-tauri/target/${{ matrix.target }}/release/ || echo "Release directory not found"
        
    - name: Package artifacts
      run: |
        mkdir -p packages
        
        # Create single comprehensive Linux package
        mkdir -p temp-linux
        
        # Copy documentation files once
        cp INSTALLATION-GUIDE.md temp-linux/
        cp README.md temp-linux/
        
        # Copy AppImage if available
        if [ -d "src-tauri/target/${{ matrix.target }}/release/bundle/appimage" ]; then
          find src-tauri/target/${{ matrix.target }}/release/bundle/appimage -name "*.AppImage" -exec cp {} temp-linux/ \;
        fi
        
        # Copy DEB package if available
        if [ -d "src-tauri/target/${{ matrix.target }}/release/bundle/deb" ]; then
          find src-tauri/target/${{ matrix.target }}/release/bundle/deb -name "*.deb" -exec cp {} temp-linux/ \;
        fi
        
        # Copy RPM package if available
        if [ -d "src-tauri/target/${{ matrix.target }}/release/bundle/rpm" ]; then
          find src-tauri/target/${{ matrix.target }}/release/bundle/rpm -name "*.rpm" -exec cp {} temp-linux/ \;
        fi
        
        # Create single zip package
        cd temp-linux && zip -r "../packages/HabitQuest-linux-x64.zip" * && cd ..
        
        # Clean up
        rm -rf temp-linux
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: HabitQuest-linux-${{ matrix.target }}
        path: |
          packages/*.zip
          src-tauri/target/${{ matrix.target }}/release/bundle/**/*
        retention-days: 30